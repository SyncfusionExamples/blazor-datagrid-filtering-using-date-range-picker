@page "/"

@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids

<SfGrid @ref="Grid" TValue="Order" AllowFiltering="true" AllowPaging="true" DataSource="@Orders">
    <GridEvents OnActionBegin="OnActionBegin" TValue="Order"></GridEvents>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" IsPrimaryKey="true"
                    TextAlign ="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="MM/dd/yyyy hh:mm tt"
                    TextAlign="TextAlign.Right" Width="250">
            <FilterTemplate>
            @{
                <SfDateRangePicker Placeholder="Choose a Range" Width="500" ShowClearButton="true"
                                   @bind-StartDate="StartDate" @bind-EndDate="EndDate" TValue="DateTime">
                    <DateRangePickerEvents TValue="DateTime" ValueChange="ValueChangeHandler">
                    </DateRangePickerEvents>
                </SfDateRangePicker>
            }
            </FilterTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" 
                    TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

@code{
    private SfGrid<Order> Grid;
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public List<Order> Orders { get; set; }
    public async Task OnActionBegin(ActionEventArgs<Order> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Filtering && 
            args.CurrentFilteringColumn == "OrderDate")
        {
            args.Cancel = true; //cancel default filter action
            if (Grid.FilterSettings.Columns == null)
            {
                Grid.FilterSettings.Columns = new List<GridFilterColumn>();
            }
            if (Grid.FilterSettings.Columns.Count > 0)
            {
                Grid.FilterSettings.Columns.RemoveAll(c => c.Field == "OrderDate");
            }
            // Get all the Grid columns.
            var columns = await Grid.GetColumns();
            // Fetch the Uid of OrderDate column.
            string fUid = columns[2].Uid;
            Grid.FilterSettings.Columns.Add(new GridFilterColumn
            {
                Field = "OrderDate",
                Operator = Syncfusion.Blazor.Operator.GreaterThanOrEqual,
                Predicate = "and",
                Value = StartDate,
                Uid = fUid
            });
            Grid.FilterSettings.Columns.Add(new GridFilterColumn
            {
                Field = "OrderDate",
                Operator = Syncfusion.Blazor.Operator.LessThanOrEqual,
                Predicate = "and",
                Value = EndDate.AddDays(1).AddSeconds(-1),
                Uid = fUid
            });
            Grid.Refresh();
        }
    }
    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }
    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 75).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }
    public void ValueChangeHandler(RangePickerEventArgs<DateTime> args)
    {
        StartDate = args.StartDate;
        EndDate = args.EndDate;
    }
}
